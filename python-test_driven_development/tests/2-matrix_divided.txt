Test file for 2-matrix_divided

Function: matrix_divided()
>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

    0) Base case
    >>> matrix_divided([[2, 4, 6], [8, 10, 12]], 2) #0
    [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]

    1) matrix must be a list
    >>> matrix_divided(([1, 2, 3], [4, 5, 6]), 2)   #1
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    2) matrix must be a list of ints or floats
    >>> matrix_divided([['1', '2','3'], ['4', '5', '6']], 2)    #2
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    3) matrix rows much be the same size
    >>> matrix_divided([[1, 2], [4, 5, 6]], 2)  #3
    Traceback (most recent call last):
        ...
    TypeError: Each row of the matrix must have the same size

    4) div must be an int or float
    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], '2.0') #4
    Traceback (most recent call last):
        ...
    TypeError: div must be a number

    5) div cannot be 0
    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], 0)   #5
    Traceback (most recent call last):
        ...
    ZeroDivisionError: division by zero

    6) quotient must be rounded to 2 decimal places
    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], 2)   #6
    [[0.5, 1.0, 1.5], [2.0, 2.5, 3.0]]

    7) division by infinity = 0.0
    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], float('inf'))   #6
    [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]
